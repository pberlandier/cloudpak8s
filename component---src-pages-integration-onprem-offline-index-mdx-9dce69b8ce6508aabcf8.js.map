{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js","webpack:///./src/pages/integration/onprem-offline/index.mdx"],"names":["PageHeader","title","tabs","className","cx","pageHeader","withTabs","length","id","text","EditLink","relativePagePath","repositoryProp","repository","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","props","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","Title","frontmatter","titleType","theme","description","keywords","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","BackToTopBtn","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-integration-onprem-offline-index-mdx-9dce69b8ce6508aabcf8.js","sourcesContent":["import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pageHeader, withTabs, text } from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, tabs = [] }) => (\n  <div className={cx(pageHeader, { [withTabs]: tabs.length })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const currentTabRegex = new RegExp(`${currentTab}(?!-)`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport BackToTopBtn from '../components/BackToTopBtn';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const { tabs, title, theme, description, keywords } = frontmatter;\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug\n        .split('/')\n        .filter(Boolean)\n        .slice(-1)[0] || slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}\n    >\n      <PageHeader title={Title ? <Title /> : title} label=\"label\" tabs={tabs} />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <BackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/ibm-cloud-architecture/cloudpak8s/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#setting-the-max_map_count\"\n        }}>{`Setting the max_map_count`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#download-and-extract-the-image\"\n        }}>{`Download and extract the image`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#creating-configyaml\"\n        }}>{`Creating config.yaml`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#creating-getallrecsh\"\n        }}>{`Creating getAllRec.sh`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#starting-the-install-process\"\n        }}>{`Starting the install process`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#creating-the-correct-kubeconfig\"\n        }}>{`Creating the correct kubeconfig`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#uninstalling-common-services\"\n        }}>{`Uninstalling Common Services`}</a></li>\n    </ul>\n    <p><strong parentName=\"p\">{`NOTE: Make sure you have 200GB or more on your installer node. If you have less, then you can download the offline image, extract and delete the original file`}</strong></p>\n    <h2>{`Setting the max_map_count`}</h2>\n    <p>{`SSH into all your worker and storage nodes and set the max_map_count to 262144.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`sudo sysctl -w vm.max_map_count=262144\necho \"vm.max_map_count=262144\" | sudo tee -a /etc/sysctl.conf\n`}</code></pre>\n    <h2>{`Download and extract the image`}</h2>\n    <p>{`SSH into your installer node. Go to `}<inlineCode parentName=\"p\">{`/opt`}</inlineCode>{` dir and download the image there. To download the image from IBM XL, use this `}<a parentName=\"p\" {...{\n        \"href\": \"https://w3-03.ibm.com/software/xl/download/ticket.wss\"\n      }}>{`https://w3-03.ibm.com/software/xl/download/ticket.wss`}</a>{`. If in the csplab environment, CP4I 2019.4.1 is already downloaded on the csplab jump server, we’ll `}<inlineCode parentName=\"p\">{`wget`}</inlineCode>{` from there as it’s much faster.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`cd /opt\nwget http://storage4.csplab.local/storage/cp4i/ibm-cp-int-2019.4.1-offline.tar.gz\nmkdir cp4ioffline\ntar xf ibm-cp-int-2019.4.1-offline.tar.gz --directory /opt/cp4ioffline\ncd cp4ioffline\ntar xvf installer_files/cluster/images/common-services-armonk-x86_64.tar.gz -O | sudo docker load\n`}</code></pre>\n    <p>{`you can delete `}<inlineCode parentName=\"p\">{`ibm-cp-int-2019.4.1-offline.tar.gz`}</inlineCode>{` now if you’re low on space.`}</p>\n    <h2>{`Creating config.yaml`}</h2>\n    <p>{`Find your oauth route. Run the following command to find it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ oc get routes --all-namespaces | grep oauth\nopenshift-authentication   oauth-openshift     oauth-openshift.apps.mislam.ocp.csplab.local\n`}</code></pre>\n    <p>{`Get the config.yaml from here: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.ibm.com/cpat/cp4-integration/blob/master/infra/helper-scripts/config.yaml\"\n      }}>{`https://github.ibm.com/cpat/cp4-integration/blob/master/infra/helper-scripts/config.yaml`}</a></p>\n    <p>{`Create a backup of the default `}<inlineCode parentName=\"p\">{`config.yaml`}</inlineCode>{` inside of `}<inlineCode parentName=\"p\">{`/opt/cp4ioffline/installer_files/cluster`}</inlineCode>{` and paste in your oauth route in the following part of your `}<inlineCode parentName=\"p\">{`config.yaml`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`roks_enabled: true\nroks_url: https://oauth-openshift.apps.mnb.ocp.csplab.local -> your oauth route\nroks_user_prefix: \"\"\n`}</code></pre>\n    <h2>{`Creating getAllRec.sh`}</h2>\n    <p>{`When the installer fails, this script will echo all the pods that are up and running and pods that are failing.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`cd /opt\ntouch getAllRec.sh\nsudo chmod 755 getAllRec.sh\n./getAllRec.sh kube-system\n`}</code></pre>\n    <p>{`Get the getAllRec.sh file from here: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.ibm.com/cpat/cp4-integration/blob/master/infra/helper-scripts/getAllRec.sh\"\n      }}>{`https://github.ibm.com/cpat/cp4-integration/blob/master/infra/helper-scripts/getAllRec.sh`}</a></p>\n    <h2>{`Creating the correct kubeconfig`}</h2>\n    <p>{`First we have to copy our kubeconfig to the cluster directory. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`cd /opt/cp4ioffline/installer_files/cluster\noc config view > kubeconfig\n`}</code></pre>\n    <p>{`Now `}<inlineCode parentName=\"p\">{`cat`}</inlineCode>{` your kubeconfig file and see if it has `}<inlineCode parentName=\"p\">{`insecure-skip-tls-verify: true`}</inlineCode>{`config. The cluster part should look something like this.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nclusters:\n- cluster:\n    insecure-skip-tls-verify: true\n    server: https://api.mislam.ocp.csplab.local:6443\n  name: api-mislam-ocp-csplab-local:6443\n`}</code></pre>\n    <p>{`But if you see this, you have to replace `}<inlineCode parentName=\"p\">{`certificate-authority-data: DATA+OMITTED`}</inlineCode>{` with `}<inlineCode parentName=\"p\">{`insecure-skip-tls-verify: true`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: DATA+OMITTED\n    server: https://api.mislam.ocp.csplab.local:6443\n`}</code></pre>\n    <p>{`Alternatively we can copy it from our Openshift Cluster Auth directory to here. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`cp /opt/myocpcluster/auth/kubeconfig /opt/cp4ioffline/installer_files/cluster\n`}</code></pre>\n    <h2>{`Starting the install process`}</h2>\n    <p>{`Now we run the installer. Notice it’s a nohup job (runs on the background) and the logs are written to `}<inlineCode parentName=\"p\">{`install.log`}</inlineCode>{` so you can close your terminal and leave but the installer will keep on going on the server. And log back in and look at `}<inlineCode parentName=\"p\">{`install.log`}</inlineCode>{` to see progress.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`nohup sudo docker run -t --net=host -e LICENSE=accept -v $(pwd):/installer/cluster:z -v /var/run:/var/run:z -v /etc/docker:/etc/docker:z --security-opt label:disable ibmcom/icp-inception-amd64:3.2.2 addon -vvv | tee install.log &\n`}</code></pre>\n    <p><strong parentName=\"p\">{`NOTE: If the installer fails, run the getAllRec.sh script to check if common services is up or not. If it isn’t up, you can run the installer again. If it is up but one of the capabilities failed tyo get pushed, then that capability can be applied individually`}</strong>{` `}</p>\n    <h2>{`Uninstalling Common Services`}</h2>\n    <p>{`In case the installer fails on the same step multiple times, it’s better to uninstall and try again. To uninstall`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`nohup sudo docker run -t --net=host -e LICENSE=accept -v $(pwd):/installer/cluster:z -v /var/run:/var/run:z -v /etc/docker:/etc/docker:z --security-opt label:disable ibmcom/icp-inception-amd64:3.2.2 uninstall-with-openshift | tee install.log &\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}